using Dapper;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class Reports_PGIndexCompare : System.Web.UI.Page
{

    private int cnt;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            FillCourse();
            SecondFillCourse();
            ThirdFillCourse();
        }
    }
    public void FillCourse()
    {
        try
        {
            List<Reports> Reportlist = new List<Reports>();
            var queryParameters = new DynamicParameters();
            queryParameters.Add("@Action", "C");
            using (IDbConnection db = new SqlConnection(ConfigurationManager.ConnectionStrings["PGConnectionString"].ConnectionString))
            {
                Reportlist = db.Query<Reports>("USP_PG_Reports", queryParameters, commandType: CommandType.StoredProcedure).ToList();

            }
            if (Reportlist.Count > 0)
            {
                ddlCourse.DataSource = Reportlist;
                ddlCourse.DataValueField = "CourseID";
                ddlCourse.DataTextField = "Course";
                ddlCourse.DataBind();
                ddlCourse.Items.Insert(0, new ListItem("-Select-", "0"));

            }
            
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public void SecondFillCourse()
    {
        try
        {
            List<Reports> Reportlist = new List<Reports>();
            var queryParameters = new DynamicParameters();
            queryParameters.Add("@Action", "C");
            using (IDbConnection db = new SqlConnection(ConfigurationManager.ConnectionStrings["PGConnectionString"].ConnectionString))
            {
                Reportlist = db.Query<Reports>("USP_PG_Reports", queryParameters, commandType: CommandType.StoredProcedure).ToList();

            }
            if (Reportlist.Count > 0)
            {
                ddlSEndCourse.DataSource = Reportlist;
                ddlSEndCourse.DataValueField = "CourseID";
                ddlSEndCourse.DataTextField = "Course";
                ddlSEndCourse.DataBind();
                ddlSEndCourse.Items.Insert(0, new ListItem("-Select-", "0"));

            }
           
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public void ThirdFillCourse()
    {
        try
        {
            List<Reports> Reportlist = new List<Reports>();
            var queryParameters = new DynamicParameters();
            queryParameters.Add("@Action", "C");
            using (IDbConnection db = new SqlConnection(ConfigurationManager.ConnectionStrings["PGConnectionString"].ConnectionString))
            {
                Reportlist = db.Query<Reports>("USP_PG_Reports", queryParameters, commandType: CommandType.StoredProcedure).ToList();

            }
            if (Reportlist.Count > 0)
            {
                ddlthrdCourse.DataSource = Reportlist;
                ddlthrdCourse.DataValueField = "CourseID";
                ddlthrdCourse.DataTextField = "Course";
                ddlthrdCourse.DataBind();
                ddlthrdCourse.Items.Insert(0, new ListItem("-Select-", "0"));

            }
            
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    protected void fillGrid(int subject, string barcode ,string hallticket, DetailsView grd)
    {
        string constr = ConfigurationManager.ConnectionStrings["PGConnectionString"].ConnectionString;
        using (SqlConnection con = new SqlConnection(constr))
        {
            using (SqlCommand cmd = new SqlCommand())
            {
                grd.DataSource = null;
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.CommandText = "USP_PG_Reports";
                cmd.Parameters.AddWithValue("@Action", "J");
                cmd.Parameters.AddWithValue("@ApplicationNo", barcode) ;
               cmd.Parameters.AddWithValue("@vchHTNo", hallticket);
                cmd.Parameters.AddWithValue("@CourseID", subject);

                cmd.Connection = con;
                SqlDataAdapter sda = new SqlDataAdapter(cmd);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                cnt = dt.Rows.Count;
                grd.DataSource = dt;
                grd.DataBind();
                dt.Clear();
                cmd.Connection.Close();
            }
        }
    }



    protected void btnShow_Click(object sender, EventArgs e)
    {
        try
        {
            int course = Convert.ToInt32(ddlCourse.SelectedValue);
            fillGrid(course, txtBarCodeNu.Text, txtBarCodeNu.Text, dtlIndevisual);
            dtlIndevisual.Visible = true;

            if (cnt == 0)
            {
                lblMessage.Visible = true;
                txtBarCodeNu.Focus();
            }
            else
                lblMessage.Visible = false;
        }
        catch(Exception ex)
        {
            throw ex;
        }
        
    }

    protected void Button1_Click(object sender, EventArgs e)
    {
        try
        {
            int course = Convert.ToInt32(ddlSEndCourse.SelectedValue);
            fillGrid(course, txtBarCodeNua.Text, txtBarCodeNua.Text, DetailsView1);
            DetailsView1.Visible = true;

            if (cnt == 0)
            {
                Label1.Visible = true;
                txtBarCodeNua.Focus();
            }
            else
                Label1.Visible = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        
    }

    protected void Button2_Click(object sender, EventArgs e)
    {
        try
        {
            int course = Convert.ToInt32(ddlthrdCourse.SelectedValue);
            fillGrid(course, txtBarCodeNuab.Text, txtBarCodeNuab.Text, DetailsView2);
            DetailsView2.Visible = true;

            if (cnt == 0)
            {
                Label2.Visible = true;
                txtBarCodeNuab.Focus();
            }
            else
                Label2.Visible = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        
    }
    public class Reports
    {
        public string CourseName { get; set; }
        public string ApplicantName { get; set; }
        public string ApplicationNo { get; set; }
        public string ExamCenter1 { get; set; }
        public string ExamCenter2 { get; set; }
        public string ExamCenter3 { get; set; }
        public int CourseID { get; set; }
        public string Course { get; set; }
        public string AppliedDate { get; set; }
        public int SlNo { get; set; }


    }

    protected void lnkExport_Click(object sender, EventArgs e)
    {
        try
        {
            Response.Clear();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment;filename=PGIndexCompare_" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.ms-excel";
            using (StringWriter sw = new StringWriter())
            {
                HtmlTextWriter hw = new HtmlTextWriter(sw);
                //To Export all pages
                dtlIndevisual.AllowPaging = false;
                dtlIndevisual.RenderControl(hw);
                DetailsView1.AllowPaging = false;
                DetailsView1.RenderControl(hw);
                DetailsView2.AllowPaging = false;
                DetailsView2.RenderControl(hw);
                //style to format numbers to string
                string style = @"<style> .textmode { } </style>";
                Response.Write(style);
                Response.Output.Write(sw.ToString());
                Response.Flush();
                Response.End();
            }

            // export = string.Empty;
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public override void VerifyRenderingInServerForm(Control control)
    {
        /* Confirms that an HtmlForm control is rendered for the specified ASP.NET
           server control at run time. */
    }
}
